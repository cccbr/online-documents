[{"id":0,"href":"/online-documents/docs/010-introduction/","title":"Introduction","section":"Docs","content":" Introduction # For those who are not familiar with the use of online documents such as these, this chapter introduces the concept of a \u0026lsquo;Static Site Generator\u0026rsquo; and gives a broad view of how it is used.\nWhat is a ‘Static Site Generator’? # The document you are reading now is stored on a server. It has been delivered over the internet to a browser (Safari, Chrome or Firefox, for example) on your device, which may be a desktop PC (for the older readers), laptop, tablet or phone, for you to read. That is ‘read’ in the widest sense – it could include pictures, sound or video. The important point is that the information you see is what is stored on the server and can only be changed by altering the files on the server. That explains the word ‘Static’. This allows for fast download of content and is ideal for an electronic book like this.\nMany websites allow interaction – selecting a purchase from an online catalogue, for example. These are ‘Dynamic’ websites but we are not going there. In many cases the static/dynamic distinction may be blurred, anyway. At the most basic level, the content of a web page is written in a markup language called html (hypertext markup language) which includes tags defining the appearance – paragraphs, headings and so on. You could write a website directly in html but people want something more exciting, with various colour schemes and layouts. Without going into detail, this involves extending the basic html to include features such as stylesheets and even code such as JavaScript. This allows features such as navigation menus and a layout that changes depending on the width of your browser screen.\nAll of this makes life difficult for anyone who just wants a nice-looking web page. So, several very clever people have produced programs which take basic text and transform it into a static web page. These are called ‘Static Site Generators’ – Jekyll is one example and Hugo is another. Taking it a step further, the design of the site generator allows other clever people to add different ‘themes’, giving you a wide choice of the appearance of your final website.\nThis document, like the other CCCBR online documents, uses the Hugo ‘Book’ theme produced by Alex Shpak. It is somewhat austere, without gimmicks, but seems appropriate for our documents. The basic text for a Hugo document is written in a scripting language called Markdown, which will be described later. I\u0026rsquo;m getting ahead of myself - hyperlinks are shown in blue (not underlined). But we will come to those.\nHow do you use Hugo? # If you have opened this using a desktop, laptop or tablet in landscape mode (essentially with a wide screen) you will see the text in the centre of the screen, with navigation menus on left and right sides. The left hand menu navigates to the main sub-divisions of the document. We will see later that these are actually separate web pages but we will call them ‘chapters’ to maintain the concept of a ‘book’. The right hand menu navigates to the sections and sub-sections of the current chapter and will change depending which chapter you are reading.\nIf you are reading this on a device with a narrower screen (a tablet in portrait mode or a phone), there is no room for the menus. Instead, you will see menu bars (three stacked horizontal lines) at top left and top right. Clicking one of these takes you to the appropriate chapter or section; clicking again removes the menu.\nYou can simulate this on a desktop or laptop by reducing the width of the browser window. A convenient way to use a tablet (such as an iPad) is to hold it horizontally and use the navigation menus to locate the chapter of interest, then turn it vertical to read the text, which will fill the screen. The presence of these navigation menus removes the need for a conventional contents list and you will see later that the use of hyperlinks allows you to move between chapters and sections without the need for text such as “see Chapter 5”. Neither do we need to say things like “see page 73” because there is no pagination as in a conventional book – you just scroll through each chapter.\nNext Chapter Disclaimer # Whilst every effort has been made to ensure the accuracy of this information, neither contributors nor the Central Council of Church Bell Ringers can accept responsibility for any inaccuracies or for any activities undertaken based on the information provided.\nVersion 0.1, September 2023\n© 2023 Central Council of Church Bell Ringers\n"},{"id":1,"href":"/online-documents/docs/015-files-and-folders/","title":"Files \u0026 Folders","section":"Docs","content":" Files and Folders # Before getting into the detail of how to produce content for a document like this, it is important to understand how that content is organised into files and folders, and how these are used to generate the navigation menus. At this point, it is not necessary to understand the contents of the files: that will be covered in later chapters.\nAs an example, we will look at the organisation of files and folders in the version of Belfry Upkeep current at the time of writing.\nThe screenshots here are taken from the Belfry Upkeep repository on GitHub. This will be explained later. Single Level # Figure 1: Belfry Upkeep repository top level\nFor now, you can ignore all the files and folder shown in Figure 1, except for the folder called \u0026lsquo;content\u0026rsquo;.\nFigure 2: The \u0026lsquo;content\u0026rsquo; folder\nThe \u0026lsquo;content\u0026rsquo; folder (Figure 2) defines the content of the home page - the first page a reader will see on opening the document. The Markdown file \u0026lsquo;_index.md\u0026rsquo; contains the text of the page and \u0026lsquo;up-holland-bells.jpg\u0026rsquo; is an image file (only one on this page). Note the folder \u0026lsquo;docs\u0026rsquo;. This contains all the other chapters.\nFigure 3: The \u0026lsquo;docs\u0026rsquo; folder within \u0026lsquo;content\u0026rsquo;\nAs you can see in Figure 3, the \u0026lsquo;docs\u0026rsquo; file contains a folder for each chapter. If you are familiar with Belfry Upkeep you will recognise the names.\nAs an example, Figure 4 shows the contents of the folder for the chapter on Bell Frames.\nFigure 4: The \u0026lsquo;bell-frames\u0026rsquo; folder within docs\nThe Markdown file \u0026lsquo;index.md\u0026rsquo; contains the text and there are seven .jpg files containing images. I will say more about the naming of image files in the chapter on Images.\nPlease don\u0026rsquo;t overthink the information in this chapter. All will become clear later. But you should take away the following points:\nNote that I have adopted a style for the names of folders and files all to be in lower case, using a hyphen (-) to separate meaningful words. All of this material will finish up in a GitHub repository and GitHub is case-sensitive. This means that a mixture of upper and lower case can lead to unexpected errors. So I decided to use all lower case, including for email addresses and external links. Note that the text of a chapter is always stored in an \u0026lsquo;index\u0026rsquo; file, called \u0026lsquo;index.md\u0026rsquo;, or \u0026lsquo;_index.md\u0026rsquo; when the chapter includes a \u0026lsquo;docs\u0026rsquo; folder - note the underscore (_). In Figure 3, you will see that I have prefaced each chapter name with a three-digit code. This does NOT determine the order in which the chapters appear in the navigation menu. We will come to that later. It is simply a way of making directory listings reflect the order of the chapters. The digits increase by ten to allow extra chapters to be inserted and there are three digits to allow for more than nine chapters. Multiple Level # This section is perhaps advanced for this early part of this document but it is convenient to cover it here. So far, we have regarded the content within a folder as a \u0026lsquo;chapter\u0026rsquo;. In web terms, each chapter is a separate web page. But Hugo allows you to have \u0026lsquo;sub-chapters\u0026rsquo; - effectively a chapter within a chapter, although both are still separate web pages. Figure 5 shows an example from Belfry Upkeep.\nFigure 5: A sub-chapter\nFigure 5 is part of the left-hand navigation menu (we will come to those soon). You will see that the \u0026lsquo;Health \u0026amp; Safety\u0026rsquo; has a sub-chapter \u0026lsquo;Avian Influenza\u0026rsquo; with the name indented.\nFigure 6 shows the contents of the \u0026lsquo;Health \u0026amp; Safety\u0026rsquo; folder.\nFigure 6: The contents of the Health and Safety chapter\nYou will see that we have an \u0026lsquo;_index.md\u0026rsquo; file (with underscore) and an enclosed folder titled \u0026lsquo;avian-flu\u0026rsquo;.\nFigure 7 shows the contents of the enclosed folder which is somewhat boring, having only an \u0026lsquo;index.md\u0026rsquo; file (no underscore) and no figures.\nFigure 7: The contents of the enclosed folder\nStyle Tip - Use of Sub-chapters: In this case, an article on avian flu became available which was relevent to the Health \u0026amp; Safety but which, in terms of size and writing style, would have unbalanced the chapter. So the avian flu article was included as a sub-chapter, presented as an \u0026ldquo;Appendix\u0026rdquo; to the Health \u0026amp; Safety chapter. Two further examples can be found in the \u0026lsquo;Stakeholder Engagement\u0026rsquo; and \u0026lsquo;Contract Specification\u0026rsquo; chapters of Belfry Projects. Here, the original draft of each chapter split into two parts: the first with general guidance and the second with specific examples. The second parts were presented as sub-chapters, identified as \u0026lsquo;addendums\u0026rsquo;. Disclaimer # Whilst every effort has been made to ensure the accuracy of this information, neither contributors nor the Central Council of Church Bell Ringers can accept responsibility for any inaccuracies or for any activities undertaken based on the information provided.\nVersion 0.1, August 2023\n© 2023 Central Council of Church Bell Ringers\n"},{"id":2,"href":"/online-documents/docs/020-markdown/","title":"Markdown","section":"Docs","content":" Markdown # The basic text input to Hugo is in a scripting language called Markdown, described fully in The Markdown Guide. This chapter provides a simple introduction – you will need to check the Markdown Guide for further options. Note that Markdown is text-based. It can be entered and edited using a code editor such as VS Code.\nA warning and an apology for a rather long chapter. The use of Markdown is key to how Hugo works and you need to understand at least the basics at this stage.\nExperience has shown that some syntax described in The Markdown Guide does not always work, or produces unexpected results. There is mention of \u0026lsquo;different flavours\u0026rsquo; of Markdown which may explain this. If you want to do something slightly out of the ordinary you need to check the result before going public with it. In the examples we will show the Markdown code and then how it is rendered in a browser. We can do this by indenting the code by one tab in the Markdown to make it render the code as written in a monospaced font against a light grey background. Alternatively, you can insert a line containing three back-ticks (```) before and after the code. Look up \u0026lsquo;fenced code blocks\u0026rsquo; in The Markdown Guide. Text and Paragraphs # Paragraphs are separated by at least one blank line. For example, the following code:\nThis is a paragraph.\rContinuing here because there is no blank line\rAnd this is another paragraph. will render as:\nThis is a paragraph. Continuing here because there is no blank line.\nAnd this is another paragraph.\nHeadings # Headings are treated as paragraphs and you must put blank lines before and after a heading. Headings are shown by placing one or more hashes (#) at the start of a line, followed by a space and a word or phrase. The number of hashes gives the level of the heading and Hugo renders the various levels differently. So the code:\n# This is a level one heading\r## This is a level two heading\r### This is a level three heading will render as:\nWe had to use a screenshot to show the rendering above, rather than letting Hugo generate it within this document. You will see later that Headings play a key part in defining the navigation menus. Having these extra headings within this document would have messed up the navigation menus. Emphasis # Surrounding text by various numbers of asterisks (*) provides italic, bold and bold italic text, as you can see from this code:\nYou can have *italic*, **bold** and ***bold italic*** which renders as:\nYou can have italic, bold and bold italic\n\u0026lsquo;Underline\u0026rsquo; is not suppported in Markdown. We am not sure why, although it may be to avoid confusion with hyperlinks. We find underlining rather ugly so we can live with this. Horizontal rule # A horizontal rule is produced by three dashes (\u0026mdash;) on a line by themselves. In this chapter we have used rules to demark examples of rendered text.\nLists # Lists can be both unordered or ordered (that is, bullets or numbers).\nUnordered lists # Unordered lists have a dash and a space (- ) in front of each line item, with no blank line between items. You can indent items by four spaces or a tab to create a nested list. The code:\n- First item\r- Second item\r- Indented item\r- Third item will render as:\nFirst item Second item Indented item Third item Ordered lists # Ordered lists have a number, a period and a space before each item (1. ), again with no blank line between items. The list must start with number one but, surprisingly, the remaining numbers can be random. To illustrate this, the code:\n1. First item\r9. Second item\r1. First indented item\r5. Second indented item\r7. Third main item will render as:\nFirst item Second item First indented item Second indented item Third main item You can nest an unordered list in an ordered list, or vice versa. We will spare you an example - try it for yourself. Tables # A table allows you to present information in rows and columns, with the cells separated by a \u0026lsquo;pipe\u0026rsquo; character (|). It appears that the table must include two heading rows. As an example, the code:\n| Figure | Subject |\r| :---: | :--- |\r| 1 | An English church in Summer |\r| 2 | Another church, freezing in the depths of winter | will render as:\nFigure Subject 1 An English church in Summer 2 Another church, freezing in the depths of winter Note the following points:\nThe heading row is emboldened (although that may not be true for all flavours of Markdown). The second heading row under must contain three or more dashes in each column. The colons in this row determine the text alignment: Colon on left for left alignment (this is the default if no colons). Colon on the right for right alignment (not shown here). Colon either end for centered text. A column will take the width of the longest cell. Alternate data rows are rendered with a light grey background. There are limitations to the characters that can be in a table cell. You can have an empty cell, but you cannot have more than one paragraph, an ordered list or an image. There is a way around this which we will discuss in the section on Shortcodes. Links # A major power of a web document is the ability to link to other documents, both external ones and ones in other parts of the document.\nExternal links # The Markdown format for an external link is (Note the use of square and curved brackets):\n[Link text](URL to link to) We can show an example from the first paragraph in this chapter. The Markdown code is:\nThe basic text input to Hugo is in a scripting language called Markdown, described fully in [*The Markdown Guide*](https://www.markdownguide.org). This chapter provides a simple introduction – you will need to check the Markdown Guide for further options. Note that Markdown is text-based. It can be entered and edited using a code editor such as VS Code. As you will have already seen, this renders as:\nThe basic text input to Hugo is in a scripting language called Markdown, described fully in The Markdown Guide. This chapter provides a simple introduction – you will need to check the Markdown Guide for further options. Note that Markdown is text-based. It can be entered and edited using a code editor such as VS Code.\nNote that the linking text (made italic in this example) appears in blue - without underlining.\nNote also that the actual URL does not appear on the browser screen (although you can see it by hovering over the hyperlink). If a reader peversely decided to print the page they would not see the link, of course, but this document is not designed to be printed. In any case, some external links may be very long and it would be difficult to type them in accurately. Within a chapter # In order to link to a section within the same chapter, you use a similar format but replace the URL by a target. To link, for example, to the \u0026lsquo;Unordered lists\u0026rsquo; section within this chapter you would use this code (Note the hash sign):\nThis is a link to [Unordered lists](#unordered-lists). This renders as:\nThis is a link to Unordered lists.\nTry clicking on the link.\nWhen moving around documents like this, a useful tip is to right-click (or two-finger click) on a link to open it in a new tab in your browser. This makes it easier to return to the original page. Every heading will have a target and, by default, this is automatically constructed as a hash (#) followed immediately by the wording of the heading in lower case, with spaces replaced by a dash. You can see the link on the browser screen if you hover over the hash sign which will appear after the heading. You can, if you wish, construct your own target so long as you follow those rules, although it is probably only worth doing if the heading is a long one (and you should avoid long headings anyway, as they make the navigation menus messy). You can see this in the link to the \u0026lsquo;Text and Paragraphs\u0026rsquo; section:\nFirst, the Heading code is amended to (Note the curly brackets around the target):\n## Text and Paragraphs {#text-paragraphs} And the code for the link is then:\nThis is a link to [Text and Paragraphs](#text-paragraphs) with a custom target. This renders as:\nThis is a link to Text and Paragraphs with a custom target.\nAgain, try it and see what happens.\nTo another chapter # We risk getting ahead of ourselves here by talking about \u0026lsquo;Chapters\u0026rsquo;. You just need to remember that each \u0026lsquo;Chapter\u0026rsquo; in this document is held in a separate folder - and becomes a separate \u0026lsquo;page\u0026rsquo; in website terms. This is covered in detail in the Files \u0026amp; Folders and Navigation Menus chapters. Because another chapter is held in a different folder, we will need to include the folder name in the link and, because that is in a higher level of the folder hierarchy, you must preface the folder name with \u0026lsquo;../\u0026rsquo; (That should be familar with anyone who has had to deal with folders in Windows or similar operating systems). So, to link to the \u0026lsquo;Introduction\u0026rsquo; chapter, the code might be:\nFor more information see [Introduction](../010-introduction/). Which renders as:\nFor more information see Introduction.\nIf you wanted to link to a particular section within another chapter, you would add a target, as described above:\nFor more information on how to use Hugo, see [Introduction](../010-introduction/#how-do-you-use-hugo). There may be a case for a shorter custom target there, but this renders as:\nFor more information on how to use Hugo, see Introduction.\nStyle Tip: Whether you link to a whole chapter or to a section within that chapter depends on what you are trying to achieve. If the section in the linked chapter is relevant to a particular point in the linking chapter, then a link to the section is appropriate. But if there is a passing reference in the linking chapter to topics covered in detail in the linked chapter, then a link to the chapter itself would be more appropriate. Shortcodes # Shortcodes are a way of overcoming some of the shortcomings of Markdown. Some are built into Hugo; some are added in the \u0026lsquo;Book\u0026rsquo; Theme; some have been provided by users. The two which have been used in the current online documents are described here.\nHint # This is included in the \u0026lsquo;Book\u0026rsquo; Theme. It can be used to provide a highlighted notification block in one of three colours. For example, the code:\nRenders as:\nThis is a red \u0026lsquo;danger\u0026rsquo; hint. (Apparently, you can\u0026rsquo;t put a shortcode within a Markdown code block - hence the use of a screenshot above.)\nThe other options are \u0026lsquo;info\u0026rsquo; (blue) and \u0026lsquo;warning\u0026rsquo; (yellow).\nStyle Tip: Within the online documents, \u0026lsquo;danger\u0026rsquo; is used for important information: stating that Faculty Rules are set out in law, or emphasising the dangers of working in the bell chamber, for example. The use of \u0026lsquo;warning\u0026rsquo; and \u0026lsquo;info\u0026rsquo; is less obvious. Yellow appears a rather insipid colour so, in spite of the name, we have generally used \u0026lsquo;warning\u0026rsquo; for including interesting but not vital information, while \u0026lsquo;info\u0026rsquo; (as in this hint) is used for more important technical information. Raw html # This shortcode is not included in the Hugo documentation, or in the \u0026lsquo;Book\u0026rsquo; theme. It is used in both Belfry Upkeep and Belfry Projects and is made available by including it in themes/hugo-book/layouts/shortcodes. The file name is rawhtml.html and the content is simply:\n\u0026lt;!-- raw html --\u0026gt;\r{{.Inner}} Html code inserted within this shortcode will be passed directly to the published document without change. We can illustrate the use by a table in Belfry Upkeep describing the Faculty Jurisdiction Rules. The code is:\nThis renders as:\nMatter Specified conditions\r(1) The inspection and routine maintenance of bells, bell fittings and bell frames\rNo tonal alterations are made to any bell\nNo bell is lifted from its bearings\n(2) The repair and maintenance of clappers, crown staples (including re-bushing) and bell wheels\rWorks do not include the re-soling or re-rimming of a bell wheel\nNo bell is lifted from its bearings\n(3) The repair or replacement of bell stays, pulleys, bell ropes (including in Ellacombe apparatus), rope bosses, sliders or slider gear\rNo bell is lifted from its bearings (4) The repainting of metal bell frames and metal bell\rfittings\rNo bell is lifted from its bearings\rThis could not have been achieved with a simple Markdown table because of the two cells containing more than one paragraph. There may be other work-arounds (though a search failed to find them). In fact, someone with a reasonable knowledge of html will probably find it easier to compile a complex table in html.\nRaw html is a useful shortcode but it must be used with caution. The ability to insert raw html, especially if it contained inline styles, could ruin the carefully constructed \u0026rsquo;look\u0026rsquo; of the \u0026lsquo;Book\u0026rsquo; theme and might lead to unpredictable results. So far, it has only been used in the online documents to overcome the limitations of the basic Markdown table. Note that the html shown above is \u0026lsquo;vanilla\u0026rsquo; - with no formatting codes apart from some italic tags. It inherits the styles of the \u0026lsquo;Book\u0026rsquo; theme and matches the \u0026rsquo;look\u0026rsquo; of the rest of the document - even to the extent of shading alternate lines of the table. Disclaimer # Whilst every effort has been made to ensure the accuracy of this information, neither contributors nor the Central Council of Church Bell Ringers can accept responsibility for any inaccuracies or for any activities undertaken based on the information provided.\nVersion 0.1, September 2023\n© 2023 Central Council of Church Bell Ringers\n"},{"id":3,"href":"/online-documents/docs/030-images/","title":"Figures","section":"Docs","content":" Figures # Figures (both pictures and video clips) could have been included in the Markdown chapter. But there are techical and style issues about how figures are treated in these online documents which merit a separate chapter.\nStyle for Figures and Captions # When work started on Belfry Upkeep - the first online document - our \u0026lsquo;model\u0026rsquo; was the Manual of Belfry Maintenance. This printed document does not reference figures by number, and figures have no captions. This makes for ugly text, such as “The figure below\u0026hellip;” or the “The figure on the previous page\u0026hellip;”. A decision was made, therefore, that figures (including video clips) should have a numbered caption to allow reference and additional explanation in the text. This decision has been carried on to the two further online documents.\nThere is an exception to the \u0026rsquo;numbered figures\u0026rsquo; style. In some cases, we had attractive images which supported the \u0026lsquo;feel\u0026rsquo; of a chapter without being technically critical. These have been used at the top of some chapters as \u0026lsquo;Title Figures\u0026rsquo; without a caption.\nThere is a \u0026lsquo;figure\u0026rsquo; shortcode which includes a caption and allows the image to be floated left or right, with text continuing beside it. The use of this was considered and rejected because:\nThe rendering of the caption is not attractive and seems to be impossible to control. More seriously, the \u0026lsquo;floating\u0026rsquo; may not work well if there are several figures close together, especially if using a narrow screen. Pictures and Drawings # The Markdown code to insert an image file is:\n![alt text](link to image) Note the exclamation mark at the start. The \u0026lsquo;alt text\u0026rsquo; is intended to provide accessability as it can be read by a \u0026lsquo;screen reader\u0026rsquo; application. The image link could be to an image file anywhere in the system (which might include a path). For simplicity, image files in the chapters of these documents are held in the same folder as the index file. To illustrate this, the favicon used for Online Documents has been loaded into the \u0026lsquo;030-images\u0026rsquo; folder. The code to show this, with a caption, as Figure 1 in this chapter is:\n![Favicon for online documents](favicon.png)\r*Figure 1: Favicon for Online Documents* This renders as:\nFigure 1: Favicon for \u0026lsquo;Online Documents\u0026rsquo;\nIn case you don\u0026rsquo;t know, the favicon is a \u0026rsquo;logo\u0026rsquo; for the document, appearing at the top left and on a browser tab. You will see other examples in the three online documents. A good logo should not need an explanation but, just in case, the \u0026rsquo;e\u0026rsquo; represents that fact that this is an electronic document and the scroll reflects that a chapter is read by scrolling down, rather than turning a page. Images will usually be from photographs, ideally initially in high resolution. The image files are processed using a graphics application (Adobe Elements or gimp, for example) as follows:\nThe photograph is cropped as necessary and possibly enhanced to improve brightness or contrast. Annotations are added if necessary. To avoid cluttering images with text, key points are identified by a letter and an arrow. The points are then described in the text. For example “\u0026hellip; secured by a locknut – shown at (D) on Figure 2”. If an image has only one key point it will usually be shown just by an arrow and the reference in the text might be “These are metal rods fitted between wheel and headstock to brace the wheel (arrowed on Figure 4).” The image size is reduced, usually to 500px width, to improve download speed. The file is saved in jpg format, using a \u0026lsquo;Save for web\u0026rsquo; option if available. Style Tip: Initially, the images in each chapter were named to include the chapter name and figure number - for example, \u0026lsquo;introduction_fig-3.jpg\u0026rsquo;. But it became clear that this caused difficulties if figures were added or removed. The recommendation now is to use descriptive, non-numbered file names. For example, in figure 1 of this document the file name (as you will see above) is \u0026lsquo;favicon.png\u0026rsquo;. Video Clips # YouTube # Many videos of interest are now available through YouTube - there is a YouTube index available on the Central Council website. This resource has clickable links which open the YouTube site in a new browser window. If you try this, you will see that, while YouTube is free, you pay for it by having to watch advertisements.\nSending a user away from your site to another one is never a good idea - they may get interested and not come back. A better solution is to embed the link and Hugo has a shortcode for this. This requires you only to enter the YouTube video ID - the code that follows \u0026lsquo;v=\u0026rsquo; in the video\u0026rsquo;s url.\nThis is used in Belfry Projects to show short (and very professional) videos taken at the start and end of the Eastnor bells project. This is much better (although you may still see advertisements) but if you watch to the end you will see that it finishes with suggestions of other YouTube videos \u0026ldquo;that might be of interest\u0026rdquo;. Again, not ideal in our view.\nVimeo # An alternative is Vimeo. This does not include advertisements. The shortcode for this, like YouTube, needs only the ID of the Vimeo video. As an example, taken from Belfry Upkeep, the code:\nproduces Figure 2 (try clicking the triangular \u0026lsquo;start\u0026rsquo; icon at bottom left):\nFigure 2: Operation of a traditional stay and slider\nThere is a free version of Vimeo but this has few options for how to show a video. The next upgrade (used here) provides more options - for example, when finished, the video returns to the opening screen. Our current subscription only allows access to one person but the next higher level will allow access to three users.\nOur view is that Vimeo provides a much more professional appearance and we would suggest the use of a three-user subscription for developments of the existing three documents and any further ones. Attribution # Acknowledgement of the producers of images is given in an \u0026lsquo;Image credits\u0026rsquo; section at the end of each chapter. This is not needed for most of this document, as almost all of the images have been produced by the author but, as an example, the code for the two images used in this chapter (one of which was taken from Belfry Upkeep and was not produced by the author) is as follows:\n| Figure | Details |\r| :---: | --- | | 1 | Favicon for \u0026#39;Online Documents\u0026#39;. (Design: Robin Shipp) |\r| 2 | Operation of a traditional stay and slider. (Video: James Joynson) | The rendering of this code can be seen in the following section.\nImage Credits # Figure Details 1 Favicon for \u0026lsquo;Online Documents\u0026rsquo;. (Design: Robin Shipp) 2 Operation of a traditional stay and slider. (Video: James Joynson) Disclaimer # Whilst every effort has been made to ensure the accuracy of this information, neither contributors nor the Central Council of Church Bell Ringers can accept responsibility for any inaccuracies or for any activities undertaken based on the information provided.\nVersion 0.1, September 2023\n© 2023 Central Council of Church Bell Ringers\n"},{"id":4,"href":"/online-documents/docs/040-navigation-menus/","title":"Navigation Menus","section":"Docs","content":" Navigation Menus # This chapter cover the navigation menus - the clickable list of document chapters on the left side of the screen and the clickable list of sections within the current chapter on the right side of the screen. (If you have a narrow browser window you will, of course need to click the menu bars at top left or right, as described in the Introduction).\nIn our view, this extensive hyperlinking removes the need for a conventional contents list or an index. We will use the Belfry Projects document (as at the time of writing) as an example.\nChapter Menu # Figure 1 shows the first five chapters of the left-hand menu.\nFigure 1: First part of the chapters menu\nHow does Hugo know in what order the chapters should appear? They do appear in the order of the chapter folders in a directory listing or in the online repository but, as we said in Files \u0026amp; Folders, that is because we have - for convenience - started each folder name with a three digit code which has no meaning to Hugo. The real answer lies in some Markdown code at the top of each chapter. In the \u0026lsquo;Introduction\u0026rsquo; chapter of Belfry Projects this is:\n---\rtitle: Introduction\rweight: 10\r---\r# Introduction Between the two rows of dashes are \u0026rsquo;title\u0026rsquo; and \u0026lsquo;weight\u0026rsquo;. These are Hugo parameters:\n\u0026rsquo;title\u0026rsquo; provides the text which will appear in the left hand navigation menu. \u0026lsquo;weight\u0026rsquo; controls the order in which the chapters appear - the higher the weight, the lower down the list. Style Tips:\nNote that we are using a Level 1 heading to provide a title for the chapter. This does not need to be identical to the title parameter. If you click on \u0026lsquo;Files \u0026amp; Folders\u0026rsquo; in this document you will see that the title on the chapter page is \u0026lsquo;Files and Folders\u0026rsquo;. This is a useful way of shortening the menu entry to make it look neater. The ampersand is useful here. Note we also use the same weight as our \u0026lsquo;for convenience\u0026rsquo; numbering of the folder. This is not essential but it is useful to increase these numbers initially by 10 to make adding extra chapters easier. Section Menu # This is the right hand menu. As you can see from any of the online documents, including this one, this menu provides links to sections within the current chapter, taking the text from the section headings. The following points should be noted:\nThe Level 1 heading, which we have used as a chapter title, is not included. The headings are listed in the order in which they appear in the chapter. The menu is indented to a level of two. In other words only the Level 2 and 3 headings are shown, although higher levels can be used. It is not clear if the two level limit can be increased. Our judgement, however, is that an increased number of level would over-complicate the menu. End of Chapter Menu # At an early stage of development, it was suggested that it would be convenient if \u0026lsquo;previous\u0026rsquo; and \u0026rsquo;next\u0026rsquo; links could be included at the end of chapters. This would be useful for someone who simply wanted to read through the document - especially if they were reading on a narrow screen without the navigation menus on-screen. Example code for this chapter is shown in Figure 2\u0026hellip;\nFigure 2: Example of the code for the end of chapter menu\n\u0026hellip; and the result can be seeen, and tested, below:\n(To be added)\nDisclaimer # Whilst every effort has been made to ensure the accuracy of this information, neither contributors nor the Central Council of Church Bell Ringers can accept responsibility for any inaccuracies or for any activities undertaken based on the information provided.\nVersion 0.1, September 2023\n© 2023 Central Council of Church Bell Ringers\n"},{"id":5,"href":"/online-documents/docs/050-publication/","title":"Publication","section":"Docs","content":" Publishing a Document # The eventual aim for all CCCBR online documents is that the code will be held in a GitHub repository and published from there. The details of this will be described below. In developing an online document, however, you may find it convenient to work on your own device, generating the output on a local server. This is not essential but we have found it very useful and we will describe it first. The workflow involved in producing an online document is discussed in more detail here.\nPublishing documents can involve a level of computer experience which may be a deterrent to some otherwise quite competent authors. For that reason, we just give a brief description of these parts of the process, assuming that an author will be able to obtain further assistance if needed. (It would be useful if the Central Council could set up an \u0026lsquo;Online Publishing Group\u0026rsquo; to assist here.) Publishing on Local Server # We assume here:\nThe user has set up a folder on their device with the name of the repository to be created containing at least some of the required files and folders. All content files are in Markdown format, see here. This has been initialised as a git repository. The Hugo application is installed on the user\u0026rsquo;s device. In a terminal window, with the user\u0026rsquo;s repository set as the present (sometimes, \u0026lsquo;current\u0026rsquo;) working directory, run the command \u0026lsquo;Hugo server\u0026rsquo;. If there are no errors in the Markdown files, this will report a successful build and say something like: \u0026lsquo;Web Server is available at http://localhost:1313/online-documents/\u0026rsquo; (That is what appears when building this document). Entering that url into a browser will show the document.\nWe have found it useful to work with the editor and browser both open - ideally with the browser on a second screen. The server will also report that it is \u0026lsquo;watching\u0026rsquo; a number of files, including the \u0026lsquo;content\u0026rsquo; folder. If any of the files are modified and saved, the change will appear immediately in the browser. This is very useful when developing a new document.\nPublishing from Github # CCCBR online documents are usually held in GitHub under the \u0026lsquo;Central Council of Church Bellringers\u0026rsquo; Organisation - see here. A user will need permission to host a document within this Organisation. The responsibility for giving that permission is not currently clear - another case for a recognised \u0026lsquo;Online Publishing Group\u0026rsquo;.\nSetting up a repository is not difficult, although advice is recommended. Once set up, files can be uploaded from the user\u0026rsquo;s device. But, again, advice is needed - GitHub has some tricks.\nWhen the repository is set up, it is fairly easy to navigate the files and folders and to edit the Markdown code if needed. When the edit is complete, the user must \u0026lsquo;Commit\u0026rsquo; the changed file - GitHub stores all changes. There is an option (recommended) to supply a brief reason for the change.\nA \u0026lsquo;Commit\u0026rsquo; triggers an action to rebuild the published website, also held within GitHub. This is similar to the way the site is rebuilt with a local server, but there may be some minutes delay before that happens.\nDisclaimer # Whilst every effort has been made to ensure the accuracy of this information, neither contributors nor the Central Council of Church Bell Ringers can accept responsibility for any inaccuracies or for any activities undertaken based on the information provided.\nVersion 0.1, September 2023\n© 2023 Central Council of Church Bell Ringers\n"},{"id":6,"href":"/online-documents/docs/060-workflow/","title":"Workflow","section":"Docs","content":" Workflow # In between the idea in an author\u0026rsquo;s mind and final publication online, the content of an online document will go through several different formats. We describe here the different formats, covering:\nThe advantages and disadvantages of various formats. The conversion from one format to another. The identification of a \u0026lsquo;definitive version\u0026rsquo; of a document for audit and archive purposes. This chapter defines an ideal workflow. Because of the way that the existing documents were produced, we cannot guarantee that, at present, this workflow has been followed strictly, especially in the maintaining of archive copies and records of review. We hope to remedy this in the future. Details of the Workflow # The stages of a typical workflow are shown in Figure 1:\nFigue 1: Stages of a typical workflow\nWP document # It is almost inevitable that the first draft of a document will be written using a Word Processor (WP) - typically Word, although other applications are available. Authors and reviewers may not be familiar with Markdown and a WP offers many useful authoring features, for example layout, cut and paste, and - perhaps most important - spell and grammar checking. For credibility, the document will require independent review and the \u0026rsquo;track changes\u0026rsquo; features in modern WPs will provide an auditable summary of the review process. The final version of the WP document, including details of the review, will be archived to MS Teams.\nConversion to Markdown # Once an agreed version has been produced in Word, it must be converted to Markdown for input to Hugo. This can be done in software, or manually. We describe these options here.\nConversion by software # The most common software for file conversion is Pandoc, which claims to be a universal document converter. This requires the program to be installed on your device - it is available for MacOS, Windows or Linux. There is no graphical interface - it is operated through a terminal window. You may need advice on how to set up and use this.\nFigure 2 shows a short Word file (test-word.docx) used as a test:\nFigure 2: Word file used as test for Markdown conversion\nThe simplest option in Pandoc for conversion to a Markdown file called test-md.md is the following Pandoc code:\npandoc test-word.docx -s -o test-md.md After running this, the file test-md.md will contain the following code:\n---\rtitle: Test Word Document\r---\r# Main Heading in Heading 1 Style\rThis document is intended as a test vehicle for conversion from Word to\rMarkdown using Pandoc.\r## Heading 2 Style\rCheck for a [web reference](https://belfryupkeep.cccbr.org.uk/): (this\rwas a Word link to *Belfry Upkeep*)\r### Heading 3\rCheck for a table:\r+----------+-------------------+----------+\r| Column 1 | Column 2 | Column 3 |\r+==========+===================+==========+\r| Data 1 | Data 2 | Data 3 |\r| | | |\r| | With a line break | |\r+----------+-------------------+----------+\r## Check for text decoration\r**This is bold.**\r*This is italic.*\r***This is both*** You will see that the software has not done badly. It correctly identified:\nDocument title Heading levels Link to a web reference Text decoration It produced a table but, as we saw earlier, this would not render correctly, as it has a line feed within a table cell.\nWhile not shown here, the conversion would not handle images, as these are in separate files. We believe there is a way around this by using the more exotic features of Pandoc, but we have not investigated this. Manual conversion # An alternative is to copy and paste text from the WP document directly into an editor - either an editor on your own device or directly into the Github editor.\nIt may help if you have two screens open, with the WP document on one and the editor on the other. Experience has shown that the most effective way is to do this one paragraph or heading at a time, adding appropriate Markdown for headings, text decoration, links and so on within the editor.\nConversion - conclusion # While software conversion seems attractive, it will be necessary to check and possibly carry out additional editing on the resulting file, for the reasons given above. This is a matter of personal choice but manual conversion may be more efficient.\nExperience also shows that the need to examine the text closely during manual conversion sometimes reveals minor errors missed in the preparation of the original WP document. (Although this is no excuse for not checking properly in the first place!) Markdown document # We strongly recommend that the Markdown document resulting from conversion is initially stored locally, usually on the personal device of the individual executing the workflow. At this point, any image files will be added to the folder and the content edited further if needed. Publishing on a local server is very useful here.\nWhile carrying out detailed work on local devices is convenient, it goes against the Workgroup ethos of maintaining files centrally. When the Markdown document is ready for uploading, the file and any image files should be copied to MS Teams as an archive. (Note that Markdown files archived within Teams need to be renamed as .txt files, as Teams does not know what to do with a .md file. ) Upload to GitHub # This stage is covered here.\nGitHub repository # Ideally, this is the final point. But there may be a need for further changes:\nEven with thorough checking, typos may slip through and noticed only in the published document. Exposed to a wider readership, technical points may be raised which require minor edits or possibly more major updates. GitHub incorporates and editor and it is possible (and very quick and convenient) to make changes like this by directly editing the GitHub repository and committing the changes. But this raises the issue of a \u0026lsquo;definitive version\u0026rsquo; of the document, discussed in the following section.\nDefinitive Version # The challenge # Assume that a \u0026lsquo;chapter\u0026rsquo; of a document is uploaded to GitHub and published online. We need to note that there are now four versions of that chapter:\nThe WP version. A version converted to Markdown, held locally or, ideally, in MS Teams. A Markdown version held in GitHub. A published version available online - which will be identical in content to 3, but in a more readable form. As noted above, versions 2 and 3 may differ from version 1, in format and as minor corrections are made. Also, with time and experience, version 3 may change in more substantial ways.\nThe challenge, therefore, is:\nHow to identify the \u0026lsquo;definitive version\u0026rsquo; of a document. Identifying what level of independent review should be applied to any change. Possible solutions # Keep whole workflow updated # Any changes made to the Markdown versions would be duplicated in the original WP version and submitted to reviewers for comment before loading onlnine.\nWe suggest that this is not realistic, given the range of volunteers who might be involved in maintaining the documents. It also limits the ability to react rapidly to suggestions or new developments. An attempt to impose this would likely be ignored in detail, if not completely.\nDefine the online version as \u0026lsquo;definitive\u0026rsquo; # This would not involve updates to the original WP document, although there is a good argument to retain this as a record of the original intentions.\nA possible argument against this is the lack of a backup copy of the definitive document, since the only copy is the GitHub repository. Given the widespread use of GitHub, however, we suggest that we must regard that copy as safe - probably safer than on many other backup devices. It is possible to \u0026lsquo;clone\u0026rsquo; a repository to another device so there may be an argument to do that periodically - possibly to Microsoft Teams.\nThere still remains, however, the difficulty of demonstrating an appropriate level of independent review for any changes. We discuss that in the following section.\nLevel of independent review # We suggest that \u0026lsquo;simple\u0026rsquo; changes - correcting a typo or a cosmetic change to wording, for example - do not require review, while adding additional material or major corrections might need review.\nAll of the chapters in the current documents include a date in the format \u0026lsquo;Month Year\u0026rsquo; and a version number in either two or three level digital form (for example \u0026lsquo;Version 1.5\u0026rsquo; or \u0026lsquo;Version 1.1.6\u0026rsquo;). The level of numbering was intended to indicate the significance of the change, although that has not been defined formally. If those levels were defined and agreed, that might provide a basis for what level of review (if any) is needed. Clearly, this requires further discussion.\nArrangements for Reviewing # The concept of \u0026lsquo;Reviewing\u0026rsquo; appears in the Workflow and needs to be considered here. Workgroup members are volunteers, usually very busy people. The result is that it has not always been easy to find reviewers, with the result that the review process has not always been rigorous or well documented - mea culpa. The following is offered as a possible solution:\nA \u0026lsquo;Review Board\u0026rsquo; is set up for each online document. It should consist of not more than 3 people. The members will usually be WG members, although other experts could be included. The members will undertake to review the initial draft of any document and any changes meeting the agreed level of review. Results and outcomes of reviews will be archived in MS Teams. The members will also undertake to provide suggestions for additions or changes based on experience, articles in the RW or other sources, but will not provide content (to retain their independent status). Disclaimer # Whilst every effort has been made to ensure the accuracy of this information, neither contributors nor the Central Council of Church Bell Ringers can accept responsibility for any inaccuracies or for any activities undertaken based on the information provided.\nVersion 0.1, September 2023\n© 2023 Central Council of Church Bell Ringers\n"}]