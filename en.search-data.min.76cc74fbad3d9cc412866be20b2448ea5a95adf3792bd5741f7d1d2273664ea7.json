[{"id":0,"href":"/online-documents/docs/010-introduction/","title":"Introduction","section":"Docs","content":" Introduction # For those who are not familiar with the use of online documents such as these, this chapter introduces the concept of a \u0026lsquo;Static Site Generator\u0026rsquo; and gives a broad view of how it is used.\nWhat is a ‘Static Site Generator’? # The document you are reading now is stored on a server. It has been delivered over the internet to a browser (Safari, Chrome or Firefox, for example) on your device, which may be a desktop PC (for the older readers), laptop, tablet or phone, for you to read. That is ‘read’ in the widest sense – It could include pictures, sound or video. The important point is that the information you see is what is stored on the server and can only be changed by altering the files on the server. That explains the word ‘Static’. This allows for fast download of content and is ideal for an electronic book like this.\nMany websites allow interaction – selecting a purchase from an online catalogue, for example. These are ‘Dynamic’ websites but we are not going there. In many cases the static/dynamic distinction may be blurred, anyway. At the most basic level, the content of a web page is written in a markup language called html (hypertext markup language) which includes tags defining the appearance – paragraphs, headings and so on. You could write a website directly in html but people want something more exciting, with various colour schemes and layouts. Without going into detail, this involves extending the basic html to include features such as stylesheets and even code such as JavaScript. This allows features such as navigation menus and a layout that changes depending on the width of your browser screen.\nAll of this makes life difficult for anyone who just wants a nice-looking web page. So, several very clever people have produced programs which take basic text and transform it into a static web page. These are called ‘Static Site Generators’ – Jekyll is one example and Hugo is another. Taking it a step further, the design of the site generator allows other clever people to add different ‘themes’, giving you a wide choice of the appearance of your final website.\nThis document, like the other CCCBR online documents, uses the Hugo ‘Book’ theme produced by Alex Shpak. It is somewhat austere, without gimmicks, but seems appropriate for our documents. The basic text for a Hugo document is written in a scripting language called Markdown, which will be described later. I\u0026rsquo;m getting ahead of myself - hyperlinks are shown in blue (not underlined). But we will come to those.\nHow do you use Hugo? # If you have opened this using a desktop, laptop or tablet in landscape mode (essentially with a wide screen) you will see the text in the centre of the screen, with navigation menus on left and right sides. The left hand menu navigates to the main sub-divisions of the document. We will see later that these are actually separate web pages but we will call them ‘chapters’ to maintain the concept of a ‘book’. The right hand menu navigates to the sections and sub-sections of the current chapter and will change depending which chapter you are reading.\nIf you are reading this on a device with a narrower screen (a tablet in portrait mode or a phone), there is no room for the menus. Instead, you will see menu bars (three stacked horizontal lines) at top left and top right. Clicking one of these takes you to the appropriate chapter or section; clicking again removes the menu.\nYou can simulate this on a desktop or laptop by reducing the width of the browser window. A convenient way to use a tablet (such as an iPad) is to hold it horizontally and use the navigation menus to locate the chapter of interest, then turn it vertical to read the text, which will fill the screen. The presence of these navigation menus removes the need for a conventional contents list and you will later that the use of hyperlinks allows you to move between chapters and sections without the need for text such as “see Chapter 5”. Neither do we need to say things like “see page 73” because there is no pagination as in a conventional book – you just scroll through each chapter.\nDisclaimer # Whilst every effort has been made to ensure the accuracy of this information, neither contributors nor the Central Council of Church Bell Ringers can accept responsibility for any inaccuracies or for any activities undertaken based on the information provided.\nVersion 0.1, September 2024\n© 2024 Central Council of Church Bell Ringers\n"},{"id":1,"href":"/online-documents/docs/015-files-and-folders/","title":"Files \u0026 Folders","section":"Docs","content":" Files and Folders # Before getting into the detail of how to produce content for a document like this, it is important to understand how that content is organised into files and folders, and how these are used to generate the navigation menus. At this point, it is not necessary to understand the contents of the files: that will be covered in later chapters.\nAs an example, we will look at the organisation of files and folders in the version of Belfry Upkeep current at the time of writing.\nThe screenshots here are taken from the Belfry Upkeep repository on GitHub. This will be explained later. Single Level # Figure 1: Belfry Upkeep repository top level\nFor now, you can ignore all the files and folder shown in Figure 1, except for the folder called \u0026lsquo;content\u0026rsquo;.\nFigure 2: The \u0026lsquo;content\u0026rsquo; folder\nThe \u0026lsquo;content\u0026rsquo; folder (Figure 2) defines the content of the home page - the first page a reader will see on opening the document. The Markdown file \u0026lsquo;_index.md\u0026rsquo; contains the text of the page and \u0026lsquo;up-holland-bells.jpg\u0026rsquo; is an image file (only one on this page). Note the folder \u0026lsquo;docs\u0026rsquo;. This contains all the other chapters.\nFigure 3: The \u0026lsquo;docs\u0026rsquo; folder within \u0026lsquo;content\u0026rsquo;\nAs you can see in Figure 3, the \u0026lsquo;docs\u0026rsquo; file contains a folder for each chapter. If you are familiar with Belfry Upkeep you will recognise the names.\nAs an example, Figure 4 shows the contents of the folder for the chapter on Bell Frames.\nFigure 4: The \u0026lsquo;bell-frames\u0026rsquo; folder within docs\nThe Markdown file \u0026lsquo;index.md\u0026rsquo; contains the text and there are seven .jpg files containing images. I will say more about the naming of image files in the chapter on Images.\nPlease don\u0026rsquo;t overthink the information in this chapter. All will become clear later. But you should take away the following points:\nNote that I have adopted a style for the names of folders and files all to be in lower case, using a hyphen (-) to separate meaningful words. All of this material will finish up in a GitHub repository and GitHub is case-sensitive. This means that a mixture of upper and lower case can lead to unexpected errors. So I decided to use all lower case, including for email addresses and external links. Note that the text of a chapter is always stored in an \u0026lsquo;index\u0026rsquo; file, called \u0026lsquo;index.md\u0026rsquo;, or \u0026lsquo;_index.md\u0026rsquo; when the chapter includes a \u0026lsquo;docs\u0026rsquo; folder - note the underscore (_). In Figure 3, you will see that I have prefaced each chapter name with a three-digit code. This does NOT determine the order in which the chapters appear in the navigation menu. We will come to that later. It is simply a way of making directory listings reflect the order of the chapters. The digits increase by ten to allow extra chapters to be inserted and there are three digits to allow for more than nine chapters. Multiple Level # This section is perhaps advanced for this early part of this document but it is convenient to cover it here. So far, we have regarded the content within a folder as a \u0026lsquo;chapter\u0026rsquo;. In web terms, each chapter is a separate web page. But Hugo allows you to have \u0026lsquo;sub-chapters\u0026rsquo; - effectively a chapter within a chapter, although both are still separate web pages. Figure 5 shows an example from Belfry Upkeep.\nFigure 5: A sub-chapter\nFigure 5 is part of the left-hand navigation menu (we will come to those soon). You will see that the \u0026lsquo;Health \u0026amp; Safety\u0026rsquo; has a sub-chapter \u0026lsquo;Avian Influenza\u0026rsquo; with the name indented.\nFigure 6 shows the contents of the \u0026lsquo;Health \u0026amp; Safety\u0026rsquo; folder.\nFigure 6: The contents of the Health and Safety chapter\nYou will see that we have an \u0026lsquo;_index.md\u0026rsquo; file (with underscore) and an enclosed folder titled \u0026lsquo;avian-flu\u0026rsquo;.\nFigure 7 shows the contents of the enclosed folder which is somewhat boring, having only an \u0026lsquo;index.md\u0026rsquo; file (no underscore) and no figures.\nFigure 7: The contents of the enclosed folder\nStyle Tip - Use of Sub-chapters: In this case, an article on avian flu became available which was relevent to the Health \u0026amp; Safety but which, in terms of size and writing style, would have unbalanced the chapter. So the avian flu article was included as a sub-chapter, presented as an \u0026ldquo;Appendix\u0026rdquo; to the Health \u0026amp; Safety chapter. Two further examples can be found in the \u0026lsquo;Stakeholder Engagement\u0026rsquo; and \u0026lsquo;Contract Specification\u0026rsquo; chapters of Belfry Projects. Here, the original draft of each chapter split into two parts: the first with general guidance and the second with specific examples. The second parts were presented as sub-chapters, identified as \u0026lsquo;addendums\u0026rsquo;. Disclaimer # Whilst every effort has been made to ensure the accuracy of this information, neither contributors nor the Central Council of Church Bell Ringers can accept responsibility for any inaccuracies or for any activities undertaken based on the information provided.\nVersion 0.1, August 2023\n© 2023 Central Council of Church Bell Ringers\n"},{"id":2,"href":"/online-documents/docs/020-markdown/","title":"Markdown","section":"Docs","content":" Markdown # The basic text input to Hugo is in a scripting language called Markdown, described fully in The Markdown Guide. This chapter provides a simple introduction – you will need to check the Markdown Guide for further options. Note that Markdown is text-based. It can be entered and edited using a code editor such as VS Code.\nA warning and an apology for a rather long chapter. The use of Markdown is key to how Hugo works and you need to understand at least the basics at this stage.\nExperience has shown that some syntax described in The Markdown Guide does not always work, or produces unexpected results. There is mention of \u0026lsquo;different flavours\u0026rsquo; of Markdown which may explain this. If you want to do something slightly out of the ordinary you need to check the result before going public with it. In the examples we will show the Markdown code and then how it is rendered in a browser. We can do this by indenting the code by one tab in the Markdown to make it render the code as written in a monospaced font against a light grey background. Alternatively, you can insert a line containing three back-ticks (```) before and after the code. Look up \u0026lsquo;fenced code blocks\u0026rsquo; in The Markdown Guide. Text and Paragraphs # Paragraphs are separated by at least one blank line. For example, the following code:\nThis is a paragraph.\rContinuing here because there is no blank line\rAnd this is another paragraph. will render as:\nThis is a paragraph. Continuing here because there is no blank line.\nAnd this is another paragraph.\nHeadings # Headings are treated as paragraphs and you must put blank lines before and after a heading. Headings are shown by placing one or more hashes (#) at the start of a line, followed by a space and a word or phrase. The number of hashes gives the level of the heading and Hugo renders the various levels differently. So the code:\n# This is a level one heading\r## This is a level two heading\r### This is a level three heading will render as:\nWe had to use a screenshot to show the rendering above, rather than letting Hugo generate it within this document. You will see later that Headings play a key part in defining the navigation menus. Having these extra headings within this document would have messed up the navigation menus. Emphasis # Surrounding text by various numbers of asterisks (*) provides italic, bold and bold italic text, as you can see from this code:\nYou can have *italic*, **bold** and ***bold italic*** which renders as:\nYou can have italic, bold and bold italic\n\u0026lsquo;Underline\u0026rsquo; is not suppported in Markdown. We am not sure why, although it may be to avoid confusion with hyperlinks. We find underlining rather ugly so we can live with this. Lists # Lists can be both unordered or ordered (that is, bullets or numbers).\nUnordered lists # Unordered lists have a dash and a space (- ) in front of each line item, with no blank line between items. You can indent items by four spaces or a tab to create a nested list. The code:\n- First item\r- Second item\r- Indented item\r- Third item will render as:\nFirst item Second item Indented item Third item Ordered lists # Ordered lists have a number, a period and a space before each item (1. ), again with no blank line between items. The list must start with number one but, surprisingly, the remaining numbers can be random. To illustrate this, the code:\n1. First item\r9. Second item\r1. First indented item\r5. Second indented item\r7. Third main item will render as:\nFirst item Second item First indented item Second indented item Third main item You can nest an unordered list in an ordered list, or vice versa. We will spare you an example - try it for yourself. Tables # A table allows you to present information in rows and columns, with the cells separated by a \u0026lsquo;pipe\u0026rsquo; character (|). It appears that the table must include two heading rows. As an example, the code:\n| Figure | Subject |\r| :---: | :--- |\r| 1 | An English church in Summer |\r| 2 | Another church, freezing in the depths of winter | will render as:\nFigure Subject 1 An English church in Summer 2 Another church, freezing in the depths of winter Note the following points:\nThe heading row is emboldened (although that may not be true for all flavours of Markdown). The second heading row under must contain three or more dashes in each column. The colons in this row determine the text alignment: Colon on left for left alignment (this is the default if no colons). Colon on the right for right alignment (not shown here). Colon either end for centered text. A column will take the width of the longest cell. Alternate data rows are rendered with a light grey background. There are limitations to the characters that can be in a table cell. You can have an empty cell, but you cannot have more than one paragraph, an ordered list or an image. There is a way around this which we will discuss in the section on Shortcodes. Links # A major power of a web document is the ability to link to other documents, both external ones and ones in other parts of the document.\nExternal links # The Markdown format for an external link is (Note the use of square and curved brackets):\n[Link text](URL to link to) We can show an example from the first paragraph in this chapter. The Markdown code is:\nThe basic text input to Hugo is in a scripting language called Markdown, described fully in [*The Markdown Guide*](https://www.markdownguide.org). This chapter provides a simple introduction – you will need to check the Markdown Guide for further options. Note that Markdown is text-based. It can be entered and edited using a code editor such as VS Code. As you will have already seen, this renders as:\nThe basic text input to Hugo is in a scripting language called Markdown, described fully in The Markdown Guide. This chapter provides a simple introduction – you will need to check the Markdown Guide for further options. Note that Markdown is text-based. It can be entered and edited using a code editor such as VS Code.\nNote that the linking text (made italic in this example) appears in blue - without underlining.\nNote also that the actual URL does not appear on the browser screen (although you can see it by hovering over the hyperlink). If a reader peversely decided to print the page they would not see the link, of course, but this document is not designed to be printed. In any case, some external links may be very long and it would be difficult to type them in accurately. Within a chapter # In order to link to a section within the same chapter, you use a similar format but replace the URL by a target. To link, for example, to the \u0026lsquo;Unordered lists\u0026rsquo; section within this chapter you would use this code (Note the hash sign):\nThis is a link to [Unordered lists](#unordered-lists). This renders as:\nThis is a link to Unordered lists.\nTry clicking on the link.\nWhen moving around documents like this, a useful tip is to right-click (or two-finger click) on a link to open it in a new tab in your browser. This makes it easier to return to the original page. Every heading will have a target and, by default, this is automatically constructed as a hash (#) followed immediately by the wording of the heading in lower case, with spaces replaced by a dash. You can see the link on the browser screen if you hover over the hash sign which will appear after the heading. You can, if you wish, construct your own target so long as you follow those rules, although it is probably only worth doing if the heading is a long one (and you should avoid long headings anyway, as they make the navigation menus messy). You can see this in the link to the \u0026lsquo;Text and Paragraphs\u0026rsquo; section:\nFirst, the Heading code is amended to (Note the curly brackets around the target):\n## Text and Paragraphs {#text-paragraphs} And the code for the link is then:\nThis is a link to [Text and Paragraphs](#text-paragraphs) with a custom target. This renders as:\nThis is a link to Text and Paragraphs with a custom target.\nAgain, try it and see what happens.\nTo another chapter # We risk getting ahead of ourselves here by talking about \u0026lsquo;Chapters\u0026rsquo;. You just need to remember that each \u0026lsquo;Chapter\u0026rsquo; in this document is held in a separate folder - and becomes a separate \u0026lsquo;page\u0026rsquo; in website terms. This is covered in detail in the Files \u0026amp; Folders and Navigation Menus chapters. Because another chapter is held in a different folder, we will need to include the folder name in the link and, because that is in a higher level of the folder hierarchy, you must preface the folder name with \u0026lsquo;../\u0026rsquo; (That should be familar with anyone who has had to deal with folders in Windows or similar operating systems). So, to link to the \u0026lsquo;Introduction\u0026rsquo; chapter, the code might be:\nFor more information see [Introduction](../010-introduction/). Which renders as:\nFor more information see Introduction.\nIf you wanted to link to a particular section within another chapter, you would add a target, as described above:\nFor more information on how to use Hugo, see [Introduction](../010-introduction/#how-do-you-use-hugo). There may be a case for a shorter custom target there, but this renders as:\nFor more information on how to use Hugo, see Introduction.\nStyle Tip: Whether you link to a whole chapter or to a section within that chapter depends on what you are trying to achieve. If the section in the linked chapter is relevant to a particular point in the linking chapter, then a link to the section is appropriate. But if there is a passing reference in the linking chapter to topics covered in detail in the linked chapter, then a link to the chapter itself would be more appropriate. Shortcodes # Shortcodes are a way of overcoming some of the shortcomings of Markdown. Some are built into Hugo; some are added in the \u0026lsquo;Book\u0026rsquo; Theme; some have been provided by users. The two which have been used in the current online documents are described here.\nHint # This is included in the \u0026lsquo;Book\u0026rsquo; Theme. It can be used to provide a highlighted notification block in one of three colours. For example, the code:\nRenders as:\nThis is a red \u0026lsquo;danger\u0026rsquo; hint. (Apparently, you can\u0026rsquo;t put a shortcode within a Markdown code block - hence the use of a screenshot above.)\nThe other options are \u0026lsquo;info\u0026rsquo; (blue) and \u0026lsquo;warning\u0026rsquo; (yellow).\nStyle Tip: Within the online documents, \u0026lsquo;danger\u0026rsquo; is used for important information: stating that Faculty Rules are set out in law, or emphasising the dangers of working in the bell chamber, for example. The use of \u0026lsquo;warning\u0026rsquo; and \u0026lsquo;info\u0026rsquo; is less obvious. Yellow appears a rather insipid colour so, in spite of the name, we have generally used \u0026lsquo;warning\u0026rsquo; for including interesting but not vital information, while \u0026lsquo;info\u0026rsquo; (as in this hint) is used for more important technical information. Raw html # This shortcode is not included in the Hugo documentation, or in the \u0026lsquo;Book\u0026rsquo; theme. It is used in both Belfry Upkeep and Belfry Projects and is made available by including it in themes/hugo-book/layouts/shortcodes (as explained later - link). The file name is rawhtml.html and the content is simply:\n\u0026lt;!-- raw html --\u0026gt;\r{{.Inner}} Html code inserted within this shortcode will be passed directly to the published document without change. We can illustrate the use by a table in Belfry Upkeep describing the Faculty Jurisdiction Rules. The code is:\nThis renders as:\nMatter Specified conditions\r(1) The inspection and routine maintenance of bells, bell fittings and bell frames\rNo tonal alterations are made to any bell\nNo bell is lifted from its bearings\n(2) The repair and maintenance of clappers, crown staples (including re-bushing) and bell wheels\rWorks do not include the re-soling or re-rimming of a bell wheel\nNo bell is lifted from its bearings\n(3) The repair or replacement of bell stays, pulleys, bell ropes (including in Ellacombe apparatus), rope bosses, sliders or slider gear\rNo bell is lifted from its bearings (4) The repainting of metal bell frames and metal bell\rfittings\rNo bell is lifted from its bearings\rThis could not have been achieved with a simple Markdown table because of the two cells containing more than one paragraph. We accept that some experts may disagree with this statement. There may be other work-arounds (though a search failed to find them). In fact, someone with a reasonable knowledge of html will probably find it easier to compile a complex table in html.\nRaw html is a useful shortcode but it must be used with caution. The ability to insert raw html, especially if it contained inline styles, could ruin the carefully constructed \u0026rsquo;look\u0026rsquo; of the \u0026lsquo;Book\u0026rsquo; theme and might lead to unpredictable results. So far, it has only been used in the online documents to overcome the limitations of the basic Markdown table. Note that the html shown above is \u0026lsquo;vanilla\u0026rsquo; - with no formatting codes apart from some italic tags. It inherits the styles of the \u0026lsquo;Book\u0026rsquo; theme and matches the \u0026rsquo;look\u0026rsquo; of the rest of the document - even to the extent of shading alternate lines of the table. Disclaimer # Whilst every effort has been made to ensure the accuracy of this information, neither contributors nor the Central Council of Church Bell Ringers can accept responsibility for any inaccuracies or for any activities undertaken based on the information provided.\nVersion 0.1, August 2023\n© 2023 Central Council of Church Bell Ringers\n"}]